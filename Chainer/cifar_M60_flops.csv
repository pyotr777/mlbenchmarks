======== Profiling result:
======== Metric result:
"Device","Kernel","Invocations","Metric Name","Metric Description","Min","Max","Avg"
"Tesla M60 (0)","sgemm_32x32x32_TN_vec",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",49.374895%,49.374895%,49.374895%
"Tesla M60 (0)","cupy_not_equal",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,2.079002%,1.556007%
"Tesla M60 (0)","void pooling_bw_kernel_max_nchw_fully_packed_small<float, float, int=2, cudnnNanPropagation_t=0>(cudnnTensorStruct, float const *, cudnnTensorStruct, float const *, cudnnTensorStruct, float const *, cudnnTensorStruct, float*, cudnnPoolingStruct, float, float, cudnn::reduced_divisor, cudnn::reduced_divisor)",5,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.003474%,0.140828%,0.069233%
"Tesla M60 (0)","void gen_sequenced<curandStateXORWOW, float, int, __operator_&__(float curand_uniform_noargs<curandStateXORWOW>(curandStateXORWOW*, int))>(curandStateXORWOW*, float*, unsigned long, unsigned long, int)",10,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.832893%,1.692623%,1.240821%
"Tesla M60 (0)","cupy_sum",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","maxwell_scudnn_winograd_128x128_ldg1_ldg4_tile148t_nt",5,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000005%,27.562481%,5.543743%
"Tesla M60 (0)","cupy_mean",5,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,2.659840%,0.532913%
"Tesla M60 (0)","maxwell_sgemm_128x64_nt",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",74.135040%,74.135040%,74.135040%
"Tesla M60 (0)","generate_seed_pseudo(unsigned __int64, unsigned __int64, unsigned __int64, curandOrdering, curandStateXORWOW*, unsigned int*)",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","cupy_argmax",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.004321%,0.003199%
"Tesla M60 (0)","void cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>(float, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>, cudnnTensorStruct, float const *, float, float const , float, cudnnTensorStruct*, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>*, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const , cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const , cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_bw_1CHW_kernel_new<float, float, bool=1, int=4>)",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.211430%,66.381756%,33.225719%
"Tesla M60 (0)","void scalePackedTensor_kernel<float, float>(cudnnTensor4dStruct, float*, float)",40,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","crossent_fwd",9,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.004755%,0.000548%
"Tesla M60 (0)","void cudnn::detail::bn_fw_tr_1C11_kernel_new<float, float, int=512, bool=1, int=1>(cudnnTensorStruct, float const *, cudnn::detail::bn_fw_tr_1C11_kernel_new<float, float, int=512, bool=1, int=1>, cudnnTensorStruct*, float const *, float const , cudnnTensorStruct*, cudnnTensorStruct*, cudnnTensorStruct**, float const *, float const *, float const *, cudnnTensorStruct*, cudnnTensorStruct*)",7,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",2.782467%,3.964320%,3.415245%
"Tesla M60 (0)","cupy_random_1_minus_x",41,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.297065%,2.669719%,1.027361%
"Tesla M60 (0)","cudnn::maxwell::gemm::computeWgradOffsetsKernel(cudnn::maxwell::gemm::ComputeOffsetsParams)",34,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,85.785982%,15.967312%
"Tesla M60 (0)","void cudnn::detail::bn_fw_tr_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=0>(cudnnTensorStruct, float const *, cudnn::detail::bn_fw_tr_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=0>, cudnnTensorStruct*, float const *, float const , float, float, float*, float const *, float const *, float const *, float, float, cudnn::reduced_divisor, int, float*, cudnn::detail::bnFwPersistentState*, int, float, float, float, int, float, float, cudnnStatus_t*, bool)",7,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",1.120619%,8.231842%,5.114325%
"Tesla M60 (0)","void cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>(float, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>, cudnnTensorStruct, float const *, float, float const , float, cudnnTensorStruct*, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1> const *, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>*, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1> const *, cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1> const , cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1> const , cudnn::detail::bn_bw_1C11_kernel_new<float, float, float2, int=512, bool=1, int=1>)",22,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.235343%,2139.664861%,324.657513%
"Tesla M60 (0)","cudnn::maxwell::gemm::computeOffsetsKernel(cudnn::maxwell::gemm::ComputeOffsetsParams)",22,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,4.531592%,1.018650%
"Tesla M60 (0)","maxwell_scudnn_128x64_stridedB_splitK_small_nn",8,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,62.925639%,13.536995%
"Tesla M60 (0)","weight_decay",292,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,72841.019407%,250.705084%
"Tesla M60 (0)","cupy_copy",50,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,6.921710%,0.138435%
"Tesla M60 (0)","maxwell_scudnn_128x128_stridedB_splitK_small_nn",32,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,86.862025%,20.670869%
"Tesla M60 (0)","cupy_divide",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000064%,0.000016%
"Tesla M60 (0)","softmax_crossent_bwd",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000005%,0.244783%,0.061490%
"Tesla M60 (0)","maxwell_scudnn_128x128_stridedB_small_nn",24,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,86.053989%,21.337712%
"Tesla M60 (0)","void cudnn::detail::bn_pointwise<float, float, bool=1, int=2>(float, cudnn::detail::bn_pointwise<float, float, bool=1, int=2>, cudnnTensorStruct, float const *, float, cudnnTensorStruct*, float, cudnn::detail::bn_pointwise<float, float, bool=1, int=2> const *, cudnn::detail::bn_pointwise<float, float, bool=1, int=2> const , double, cudnn::detail::bn_pointwise<float, float, bool=1, int=2>*, cudnn::detail::bn_pointwise<float, float, bool=1, int=2> const *, bool)",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",1.808176%,1.808176%,1.808176%
"Tesla M60 (0)","sgemm_128x128x8_NN_vec",2,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",54.365610%,82.287953%,68.326782%
"Tesla M60 (0)","maxwell_scudnn_winograd_128x128_ldg1_ldg4_tile148n_nt",39,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.115896%,80.172898%,16.917219%
"Tesla M60 (0)","void gen_sequenced<curandStateXORWOW, double2, normal_args_double_st, __operator_&__(double2 curand_normal_scaled2_double<curandStateXORWOW>(curandStateXORWOW*, normal_args_double_st))>(curandStateXORWOW*, double2*, unsigned long, unsigned long, normal_args_double_st)",15,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","sgemm_32x32x32_NT_vec",2,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.156976%,58.423696%,29.290336%
"Tesla M60 (0)","sgemm_128x128x8_NT_vec",5,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.154374%,79.586515%,16.042706%
"Tesla M60 (0)","cupy_exp",3,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.715827%,2.121284%,1.184845%
"Tesla M60 (0)","cupy_maximum",37,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,107.369180%,8.649469%
"Tesla M60 (0)","void cudnn::detail::bn_fw_tr_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=20>(cudnnTensorStruct, float const *, cudnn::detail::bn_fw_tr_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=20>, cudnnTensorStruct*, float const *, float const , float, float, float*, float const *, float const *, float const *, float, float, cudnn::reduced_divisor, int, float*, cudnn::detail::bnFwPersistentState*, int, float, float, float, int, float, float, cudnnStatus_t*, bool)",7,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",1.467206%,33.314355%,19.192561%
"Tesla M60 (0)","cupy_add",37,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,6.454708%,0.411813%
"Tesla M60 (0)","void cudnn::detail::pooling_fw_4d_kernel<float, float, cudnn::detail::maxpooling_func<float, cudnnNanPropagation_t=0>, int=0, bool=0>(cudnnTensorStruct, float const *, cudnn::detail::pooling_fw_4d_kernel<float, float, cudnn::detail::maxpooling_func<float, cudnnNanPropagation_t=0>, int=0, bool=0>, cudnnTensorStruct*, cudnnPoolingStruct, float, cudnnPoolingStruct, int, cudnn::reduced_divisor, float)",10,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.177307%,0.067614%
"Tesla M60 (0)","maxwell_scudnn_128x128_relu_small_nn",30,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,86.253307%,25.669098%
"Tesla M60 (0)","void cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4>(float, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4>, cudnnTensorStruct, float const *, float, cudnnTensorStruct*, float, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4> const , double, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4>*, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4> const *, double, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4> const *, cudnn::detail::bn_fw_tr_1CHW_kernel_new<float, float, bool=1, int=4> const *)",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.743490%,0.743490%,0.743490%
"Tesla M60 (0)","void cudnn::winograd::generateWinogradTilesKernel<int=0, float, float>(cudnn::winograd::GenerateWinogradTilesParams<float, float>)",16,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.053973%,4.524790%,1.210142%
"Tesla M60 (0)","void cudnn::detail::softmax_fw_kernel<int=2, float, float, int=256, int=2, int=1, int=0>(cudnnTensorStruct, float const *, cudnn::detail::softmax_fw_kernel<int=2, float, float, int=256, int=2, int=1, int=0>, cudnnTensorStruct*, int, float, cudnnTensorStruct*, int, int)",1,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.713583%,0.713583%,0.713583%
"Tesla M60 (0)","void cudnn::detail::wgrad_alg1_engine<float, int=128, int=6, int=8, int=3, int=3, int=5, bool=1, bool=0>(int, int, int, float const *, int, cudnn::detail::wgrad_alg1_engine<float, int=128, int=6, int=8, int=3, int=3, int=5, bool=1, bool=0>*, float const , kernel_grad_params, int, float, float, int, int, int*, kernel_grad_params, int, int)",3,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",50.013665%,50.176753%,50.089331%
"Tesla M60 (0)","cupy_multiply",59,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.249740%,0.038470%
"Tesla M60 (0)","momentum_sgd",87,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000113%,42.623254%,2.450098%
"Tesla M60 (0)","relu_bwd",16,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","cupy_equal",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
"Tesla M60 (0)","dropout_fwd",40,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.153951%,0.328658%,0.283245%
"Tesla M60 (0)","void cudnn::detail::bn_bw_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=7>(float, float, float, float, cudnnTensorStruct, float const *, cudnn::detail::bn_bw_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=7>, float const , cudnn::detail::bn_bw_1C11_singleread<float, int=512, bool=1, int=1, int=2, int=7>, cudnnTensorStruct*, float const *, float*, float const *, float const , float const , float, cudnn::reduced_divisor, int, float*, cudnn::detail::bnBwPersistentState*, int, float, float, float, int, float, cudnnStatus_t*, bool)",4,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.120204%,1.187312%,0.789663%
"Tesla M60 (0)","cudnn::maxwell::gemm::computeBOffsetsKernel(cudnn::maxwell::gemm::ComputeBOffsetsParams)",61,"flop_sp_efficiency","FLOP Efficiency(Peak Single)",0.000000%,0.000000%,0.000000%
======== Warning: One or more events or metrics can't be profiled. Rerun with "--print-gpu-trace" for detail.
